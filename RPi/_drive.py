# -*- coding: utf-8 -*-#!/usr/bin/python########## imports STARTfrom __future__ import print_functionimport httplib2import osimport ioimport simplejsonfrom apiclient import discoveryfrom apiclient.errors import HttpErrorfrom apiclient.http import MediaFileUploadfrom apiclient.http import MediaIoBaseDownloadfrom json import dumps as json_dumpsimport jsonfrom pprint import pprintimport oauth2clientfrom oauth2client import clientfrom oauth2client import toolsimport datetimeimport timeimport pymongoimport _calendar########## imports FINISH########## global variables STARTSETTINGS = NoneSETTINGS_FILE = 'settings.txt'SETTINGS_FILE_ID = NoneSETTINGS_CHANGED = FalseEVENTS = NoneEVENTS_FILE = 'events.txt'EVENTS_FILE_ID = NoneEVENTS_CHANGED = FalseSCOPES = 'https://www.googleapis.com/auth/drive'CLIENT_SECRET_FILE = './client_secret.json'APPLICATION_NAME = 'SSS'DRIVE_SERVICE = NoneCONN = NoneDB = NoneCOLLECTION_EVENTS = NoneCOLLECTION_SETTINGS = NoneCALENDAR = None########## global variables FINISH################################################################# get credentials STARTdef get_credentials():    home_dir = os.path.expanduser('~')    credential_dir = os.path.join(home_dir, '.credentials')    if not os.path.exists(credential_dir):        os.makedirs(credential_dir)    credential_path = os.path.join(credential_dir,                                   'drive-python-quickstart.json')    store = oauth2client.file.Storage(credential_path)    credentials = store.get()    if not credentials or credentials.invalid:        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)        flow.user_agent = APPLICATION_NAME        if flags:            credentials = tools.run_flow(flow, store, flags)        else: # Needed only for compatibility with Python 2.6            credentials = tools.run(flow, store)        print('Storing credentials to ' + credential_path)    return credentials##### get credentials FINISH##### get drive service STARTdef get_drive_service():    global DRIVE_SERVICE    credentials = get_credentials()    http = credentials.authorize(httplib2.Http())    DRIVE_SERVICE = discovery.build('drive', 'v3', http=http)##### get drive service FINISH################################################################# update settings to local STARTdef get_settings():    global SETTINGS    global SETTINGS_FILE_ID    global SETTINGS_CHANGED    global DRIVE_SERVICE    ### get drive service    if (DRIVE_SERVICE == None):        get_drive_service()    page_token = None    response = DRIVE_SERVICE.files().list(q="name='"+SETTINGS_FILE+"'",                                         spaces='drive',                                         fields='nextPageToken, files(id, name)',                                         pageToken=page_token).execute()    files = response.get('files', [])    print ('[SSS][DRIVE][GET_SETTINGS] size of search result is',len(files))    if (len(files) == 0):        print("[SSS][DRIVE][GET_SETTINGS] settings file is NOT exist")        return None    else :        SETTINGS_FILE_ID = files[0].get('id')        #if (check_events_version(files[0].get('version'))):        #update_events_version(files[0].get('version'))        print("[SSS][DRIVE][GET_SETTINGS] settings file is exist. Downloading settings file")        print("[SSS][DRIVE][GET_SETTINGS] settings_id:",SETTINGS_FILE_ID)        request = DRIVE_SERVICE.files().get_media(fileId=SETTINGS_FILE_ID)        # request2 = drive_service.files().get(fileId=SETTINGS_FILE_ID).execute()        # #print ("###########################",request2['version'])        # # fh = io.BytesIO()        backup = None        try:            with open(SETTINGS_FILE) as data_file:                backup = json.load(data_file)            fh = io.FileIO(SETTINGS_FILE, mode='wb')            downloader = MediaIoBaseDownload(fh, request)            done = False            while done is False:                status, done = downloader.next_chunk()                print ("[SSS][DRIVE][GET_SETTINGS] Download %d%%." % int(status.progress() * 100))            with open(SETTINGS_FILE) as data_file:                SETTINGS = json.load(data_file)        except IOError:            with open("/home/pi/Workspace/" + str(SETTINGS_FILE)) as data_file:                backup = json.load(data_file)            fh = io.FileIO("/home/pi/Workspace/" + str(SETTINGS_FILE), mode='wb')            downloader = MediaIoBaseDownload(fh, request)            done = False            while done is False:                status, done = downloader.next_chunk()                print ("[SSS][DRIVE][GET_SETTINGS] Download %d%%." % int(status.progress() * 100))            with open("/home/pi/Workspace/" + str(SETTINGS_FILE)) as data_file:                SETTINGS = json.load(data_file)        SETTINGS_CHANGED = (backup != SETTINGS)        print ("[SSS][DRIVE][GET_SETTINGS] check differnce", SETTINGS_CHANGED)        return SETTINGS##### update settings to local FINISH################################################################# get events to local STARTdef get_events():    global EVENTS    global EVENTS_FILE_ID    global EVENTS_CHANGED    global DRIVE_SERVICE    ### get drive service    if (DRIVE_SERVICE == None):        get_drive_service()    page_token = None    response = DRIVE_SERVICE.files().list(q="name='"+EVENTS_FILE+"'",                                         spaces='drive',                                         fields='nextPageToken, files(id, name)',                                         pageToken=page_token).execute()    files = response.get('files', [])    print ('[SSS][DRIVE][GET_EVENTS] size of search result is',len(files))    if (len(files) == 0):        print("[SSS][DRIVE][GET_EVENTS] EVENTS file is NOT exist, creating one")        EVENTS = {            'prev' : [],            'current' : []        }        # print ('length of events.prev is ', len(EVENTS['prev']))        # creating events.txt on google drive        jsondata = simplejson.dumps(EVENTS, indent=4, skipkeys=True, sort_keys=True)        fd = open(EVENTS_FILE, 'w')        fd.write(jsondata)        fd.close()        body = {            'name' : EVENTS_FILE,            'title' : EVENTS_FILE,            'description' : 'events file for SSS'        }        media_body = MediaFileUpload(EVENTS_FILE, resumable=True)        file = DRIVE_SERVICE.files().create(body=body, media_body=media_body).execute()        EVENTS_FILE_ID = file.get('id')        print ('[SSS][DRIVE][GET_EVENTS] File ID: %s' % file.get('id'))        print ("[SSS][DRIVE][GET_EVENTS] Created events.txt on google drive")        EVENTS_CHANGED = True    else :        EVENTS_FILE_ID = files[0].get('id')        print("[SSS][DRIVE][GET_EVENTS] EVENTS file is exist. Downloading EVENTS file")        print("[SSS][DRIVE][GET_EVENTS] EVENTS_FILE_ID:",EVENTS_FILE_ID)        request = DRIVE_SERVICE.files().get_media(fileId=EVENTS_FILE_ID)        # fh = io.BytesIO()        backup = None        try :            with open(EVENTS_FILE) as data_file:                backup = json.load(data_file)            fh = io.FileIO(EVENTS_FILE, mode='wb')            downloader = MediaIoBaseDownload(fh, request)            done = False            while done is False:                status, done = downloader.next_chunk()                print ("[SSS][DRIVE][GET_EVENTS] Download %d%%." % int(status.progress() * 100))            with open(EVENTS_FILE) as data_file:                EVENTS = json.load(data_file)        except IOError:            with open("/home/pi/Workspace/"+str(EVENTS_FILE)) as data_file:                backup = json.load(data_file)            fh = io.FileIO("/home/pi/Workspace/"+str(EVENTS_FILE), mode='wb')            downloader = MediaIoBaseDownload(fh, request)            done = False            while done is False:                status, done = downloader.next_chunk()                print ("[SSS][DRIVE][GET_EVENTS] Download %d%%." % int(status.progress() * 100))            with open("/home/pi/Workspace/"+str(EVENTS_FILE)) as data_file:                EVENTS = json.load(data_file)        # data is setting        EVENTS_CHANGED = (backup!=EVENTS)        print ("[SSS][DRIVE][GET_EVENTS] check differece ", EVENTS_CHANGED)    return EVENTS##### update events to local FINISH################################################################# connect to mongo DB STARTdef connect_mongo():    global CONN    global DB    global COLLECTION_EVENTS    global COLLECTION_SETTINGS    CONN = pymongo.MongoClient()    DB = CONN.sprinkler    COLLECTION_EVENTS = DB.events    COLLECTION_SETTINGS = DB.settings    print ("[SSS][DRIVE][CONNECT_MONGO] Connected to MongoDB")##### connect to mongo DB FINISH################################################################# update events in mongo DB STARTdef update_events_mongo():    jsondata = json.dumps(EVENTS['current'], default=lambda x:x.__dict__)    current_events = json.loads(jsondata)    print (EVENTS['current'])    print (current_events)    print (len(EVENTS['current']))    print (len(current_events))    for c in current_events:        jdata = json.dumps(c, default=lambda x:x.__dict__)        value = json.loads(jdata)        if 'id' in c:            result = COLLECTION_EVENTS.update({'id':c['id']}, {"$set": value}, upsert=True)            print ("pushied result : " + str(result))    print ("[SSS][DRIVE][UPDATE_EVENTS_MONGO] Events updated into MongoDB")##### update events in mongo DB FINISH################################################################# update events in mongo DB STARTdef update_settings_mongo():    # print ("[SSS][DRIVE][UPDATE_SETTINGS_MONGO] Updating settings on MongoDB")    if (SETTINGS == None):        get_settings()    result = COLLECTION_SETTINGS.find({'calId':SETTINGS['calId']})    # print(result)    jsondata = json.dumps(SETTINGS, default=lambda x:x.__dict__)    value = json.loads(jsondata)    if result.count() == 0:        print("[SSS][DRIVE][UPDATE_SETTINGS_MONGO] No previous settings")        result = COLLECTION_SETTINGS.insert(value)    else :        print("[SSS][DRIVE][UPDATE_SETTINGS_MONGO] Previous settings exists")        result = COLLECTION_SETTINGS.update({'calId':SETTINGS['calId']}, {"$set": value}, upsert=False)    # print(result)    print ("[SSS][DRIVE][UPDATE_SETTINGS_MONGO] Settings updated into MongoDB")##### update events in mongo DB FINISH################################################################# update events in google drive STARTdef upload_events_drive():    jsondata = simplejson.dumps(EVENTS, indent=4, skipkeys=True, sort_keys=True)    fd = open(EVENTS_FILE, 'w')    fd.write(jsondata)    fd.close()    file_metadata = {        'fileId' : EVENTS_FILE_ID,        'name' : EVENTS_FILE    }    media = MediaFileUpload(EVENTS_FILE,                    resumable=True)    file = DRIVE_SERVICE.files().update(fileId=EVENTS_FILE_ID, body=file_metadata, media_body=media).execute()    print ('[SSS][DRIVE][UPDATE_EVENTS_DRIVE] File ID: %s' % file.get('id'))    print ("[SSS][DRIVE][UPDATE_EVENTS_DRIVE] Updated events.txt on google drive")##### update events in google drive FINISH################################################################# update events in google drive STARTdef upload_settings_drive():    jsondata = simplejson.dumps(SETTINGS, indent=4, skipkeys=True, sort_keys=True)    fd = open(SETTINGS_FILE, 'w')    fd.write(jsondata)    fd.close()    file_metadata = {        'fileId' : SETTINGS_FILE_ID,        'name' : SETTINGS_FILE    }    media = MediaFileUpload(SETTINGS_FILE,                    resumable=True)    file = DRIVE_SERVICE.files().update(fileId=SETTINGS_FILE_ID, body=file_metadata, media_body=media).execute()    print ('[SSS][DRIVE][UPDATE_SETTINGS_DRIVE] File ID: %s' % file.get('id'))    print ("[SSS][DRIVE][UPDATE_SETTINGS_DRIVE] google drive update complete")##### update events in google drive FINISH################################################################# add events STARTdef add_event(sTime, eTime, zone):    # structure in _calendar    # def add_event(calId, sTime, eTime, zones, location):    global EVENTS    global SETTINGS    if EVENTS == None :        #### get EVENTS        get_events()        print ("[SSS][DRIVE][ADD_EVENT] No EVENTS. Download starts")    if SETTINGS == None :        get_settings()    location = str(SETTINGS['location']['lat']) + ',' + str(SETTINGS['location']['long'])    event_id = CALENDAR.add_event(SETTINGS['calId'], sTime, eTime, zone, location)    event_type = "auto"    # add event    event = {        'id' : event_id,        'sTime' : sTime,        'eTime' : eTime,        'zones' : zone,        'type' : event_type,        'location' : location    }    EVENTS['current'].append(event)    #print(EVENTS)    # updating in mongoDB    result = COLLECTION_EVENTS.update({'id':event_id}, {"$set": event}, upsert=True)    # updating in google drive    upload_events_drive()##### add events FINISH################################################################# remove events STARTdef remove_event(event_id):    global EVENTS    del_list = []    for i in range(0, len(EVENTS['current']) ):        if EVENTS['current'][i]['id'] == event_id:            del_list.append(i)    del_list.reverse()    for i in del_list:        del EVENTS['current'][i]    COLLECTION_EVENTS.remove({"id":event_id})    CALENDAR.remove_event(SETTINGS['calId'], event_id)##### remove events FINISH################################################################# remove events by date STARTdef remove_events_bydate(end_date):    global EVENTS    # end_date = YYYY-MM-DD    year = int(end_date[0:4])    month = int(end_date[5:7])    day = int(end_date[8:10])    end_date = datetime.datetime(year, month, day)    initial = datetime.datetime(1970,1,1)    end_sec =  (end_date-initial).total_seconds() + 86400 # add one more day    print ("[SSS][DRIVE][REMOVE_EVENTS_BYDATE] Remove events by date: end date:", end_sec)    #print(EVENTS)    del_list = []    print ("[SSS][DRIVE][REMOVE_EVENTS_BYDATE] size of EVENTS",len(EVENTS['current']))    for i in range(0, len(EVENTS['current']) ):        if EVENTS['current'][i]['eTime'] <= end_sec and EVENTS['current'][i]['type'] == 'auto':            del_list.append(i)    del_list.reverse()    print ("[SSS][DRIVE][REMOVE_EVENTS_BYDATE] size of EVENTS",len(EVENTS['current']))    # print (del_list)    print ("[SSS][DRIVE][REMOVE_EVENTS_BYDATE] size of del_list",len(del_list))    for i in del_list:        del_event_id = EVENTS['current'][i]['id']        COLLECTION_EVENTS.remove({"id":del_event_id})        remove_event(del_event_id)    print ("[SSS][DRIVE][REMOVE_EVENTS_BYDATE] size of EVENTS",len(EVENTS['current']))##### remove events by date FINISH##### getters STARTdef events_changed():    return EVENTS_CHANGEDdef settings_changed():    return SETTINGS_CHANGEDdef get_max():    if SETTINGS['currLevel'] == 'High':        return 2    elif SETTINGS['currLevel'] == 'Medium':        return 1    elif SETTINGS['currLevel'] == 'Low':        return 0    else:        return SETTINGS['custom']['customLvl']def get_location():    return str(SETTINGS['location']['lat']) + ',' + str(SETTINGS['location']['long'])def get_lat():    return str(SETTINGS['location']['lat'])def get_long():    return str(SETTINGS['location']['long'])def get_rained():    return float(SETTINGS['watered']['rainedAmt'])def get_watered():    return float(SETTINGS['watered']['wateredAmt'])def add_rained(rained):    SETTINGS['watered']['rainedAmt'] += float(rained)def add_watered(waterd):    SETTINGS['watered']['wateredAmt'] += float(watered)def reset_rained():    SETTINGS['watered']['rainedAmt'] = 0def reset_watered(waterd):    SETTINGS['watered']['wateredAmt'] = 0##### getters FINISH##### main functiondef main():    global CALENDAR    print ("[SSS][DRIVE] Starting MAIN function")    print ("[SSS][DRIVE] Getting google drive service")    get_credentials()    get_drive_service()    connect_mongo()    CALENDAR = _calendar    CALENDAR.main()    if SETTINGS == None :        get_settings()        if 'calId' not in SETTINGS :            (calId, timezone) = CALENDAR.create_calendar()            SETTINGS['calId'] = calId            SETTINGS['timezone'] = timezone            calLink = '<iframe src="https://calendar.google.com/calendar/embed?src='+calId+'&ctz='+timezone+'" style="border: 0" width="800" height="600" frameborder="0" scrolling="no"></iframe>'            SETTINGS['calLink'] = calLink            upload_settings_drive()            get_settings()        update_settings_mongo()    if EVENTS == None :        get_events()        update_events_mongo()    print ("[SSS][DRIVE] Closing MAIN function")##### always run below.if __name__ == "__main__":    main()